# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # detect whether any code changes are included in this PR
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v3
        # dorny/paths-filter needs git clone for push events
        # https://github.com/dorny/paths-filter#supported-workflows
        if: github.event_name != 'pull_request'
      - uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          filters: |
            code:
              - 'condact/**'
              - 'tests/**'
              - '*.py'
              - 'recipe/**'
              - '.github/workflows/tests.yml'


  build:
    needs: changes
    if: needs.changes.outputs.code == 'true'

    permissions:
      contents: read
      pull-requests: write

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        default-channel: ['defaults']
        python-version: ["3.9", "3.10", "3.11"]
    env:
      OS: Linux
      PYTHON: ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Create and upload canary build
      uses: conda/actions/canary-release@v23.7.0
      env:
        # Run conda-build in isolated activation to properly package condact
        # Not sure if this is necessary
        _CONDA_BUILD_ISOLATED_ACTIVATION: 1
      with:
        package-name: ${{ github.event.repository.name }}
        anaconda-org-channel: kalawac
        anaconda-org-label: dev
        anaconda-org-token: ${{ secrets.ANACONDA_ORG_CANARY_TOKEN }}
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest and calculate coverage
      run: |
        pytest --cov-report "xml:coverage.xml"  --cov=.
        - name: Create Coverage 
          if: ${{ github.event_name == 'pull_request' }}
          uses: orgoro/coverage@v3
          with:
              coverageFile: coverage.xml
              token: ${{ secrets.GITHUB_TOKEN }}